-- Drop existing tables if they exist (optional)
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Employees CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Departments CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE JobRoles CASCADE CONSTRAINTS';
EXCEPTION
    WHEN OTHERS THEN
        IF SQLCODE != -942 THEN
            RAISE;
        END IF;
END;
/

-- Create the JobRoles table
CREATE TABLE JobRoles (
    JobRoleID   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RoleName    VARCHAR2(100) NOT NULL,
    Description VARCHAR2(255),
    MinSalary   NUMBER(10, 2) NOT NULL,
    MaxSalary   NUMBER(10, 2) NOT NULL,
    CONSTRAINT CHK_SalaryRange CHECK (MinSalary <= MaxSalary)
);

-- Create the Departments table
CREATE TABLE Departments (
    DepartmentID   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DepartmentName VARCHAR2(100) NOT NULL UNIQUE,
    Location       VARCHAR2(255),
    ManagerID      NUMBER,
    CONSTRAINT FK_DepartmentManager FOREIGN KEY (ManagerID) REFERENCES Employees(EmployeeID)
);

-- Create the Employees table
CREATE TABLE Employees (
    EmployeeID      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FirstName       VARCHAR2(50) NOT NULL,
    LastName        VARCHAR2(50) NOT NULL,
    Email           VARCHAR2(100) NOT NULL UNIQUE,
    PhoneNumber     VARCHAR2(20),
    HireDate        DATE DEFAULT SYSDATE NOT NULL,
    JobRoleID       NUMBER NOT NULL,
    DepartmentID    NUMBER NOT NULL,
    Salary          NUMBER(10, 2) NOT NULL,
    CONSTRAINT CHK_SalaryPositive CHECK (Salary > 0),
    CONSTRAINT FK_EmployeeJobRole FOREIGN KEY (JobRoleID) REFERENCES JobRoles(JobRoleID),
    CONSTRAINT FK_EmployeeDepartment FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID)
);

-- Add a self-referential foreign key for ManagerID in Employees table
ALTER TABLE Employees ADD CONSTRAINT FK_Manager FOREIGN KEY (ManagerID) REFERENCES Employees(EmployeeID);

-- Insert sample data into JobRoles table
INSERT INTO JobRoles (RoleName, Description, MinSalary, MaxSalary) VALUES ('Software Engineer', 'Develops software applications', 60000, 120000);
INSERT INTO JobRoles (RoleName, Description, MinSalary, MaxSalary) VALUES ('HR Manager', 'Manages human resources operations', 70000, 130000);
INSERT INTO JobRoles (RoleName, Description, MinSalary, MaxSalary) VALUES ('Sales Representative', 'Handles sales and customer relationships', 40000, 90000);

-- Insert sample data into Departments table
INSERT INTO Departments (DepartmentName, Location) VALUES ('Engineering', 'New York');
INSERT INTO Departments (DepartmentName, Location) VALUES ('Human Resources', 'San Francisco');
INSERT INTO Departments (DepartmentName, Location) VALUES ('Sales', 'Chicago');

-- Insert sample data into Employees table
INSERT INTO Employees (FirstName, LastName, Email, PhoneNumber, HireDate, JobRoleID, DepartmentID, Salary, ManagerID)
VALUES ('John', 'Doe', 'john.doe@example.com', '123-456-7890', TO_DATE('2020-01-15', 'YYYY-MM-DD'), 1, 1, 80000, NULL);

INSERT INTO Employees (FirstName, LastName, Email, PhoneNumber, HireDate, JobRoleID, DepartmentID, Salary, ManagerID)
VALUES ('Jane', 'Smith', 'jane.smith@example.com', '987-654-3210', TO_DATE('2018-03-10', 'YYYY-MM-DD'), 2, 2, 90000, NULL);

INSERT INTO Employees (FirstName, LastName, Email, PhoneNumber, HireDate, JobRoleID, DepartmentID, Salary, ManagerID)
VALUES ('Alice', 'Johnson', 'alice.johnson@example.com', '555-123-4567', TO_DATE('2022-07-20', 'YYYY-MM-DD'), 3, 3, 50000, 2);

-- Commit the changes
COMMIT;

-- Query to display all employees with their job roles and departments
SELECT
    e.EmployeeID,
    e.FirstName || ' ' || e.LastName AS FullName,
    e.Email,
    j.RoleName,
    d.DepartmentName,
    e.Salary
FROM
    Employees e
JOIN
    JobRoles j ON e.JobRoleID = j.JobRoleID
JOIN
    Departments d ON e.DepartmentID = d.DepartmentID;